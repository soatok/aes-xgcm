const {aes_cbc_mac, aes_derive_subkey, aes_xgcm_encrypt} = require("./index");
const expect = require('chai').expect;

/* This is just a quick utility function for test prettiness. */
function bin2hex(u8arr) {
    let str = '';
    let c;
    const CHARS = '0123456789abcdef';
    for (let i = 0; i < u8arr.length; i++) {
        c = (u8arr[i] >>> 4) & 0xf;
        str += CHARS[c];
        c = u8arr[i] & 0xf;
        str += CHARS[c];
    }
    return str;
}

describe('CBC-MAC', function () {
    it('AES-128 test vectors', function () {
        expect('63cef5810cc001b0245a9666c88b1dc3').to.be.equal(bin2hex(aes_cbc_mac(
            new Uint8Array(0),
            new Uint8Array([
                0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0
            ]),
        )))

        expect('be13986afc877709dca49a25307fd89a').to.be.equal(bin2hex(aes_cbc_mac(
            new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]),
            new Uint8Array([
                0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0
            ]),
        )))

        expect('8c2d6f5d73e2d49745fd461121cff78d').to.be.equal(bin2hex(aes_cbc_mac(
            new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]),
            new Uint8Array([
                0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0
            ]),
        )))
    });
    it('AES-256 test vectors', function () {

        expect('8064554adbc0215ecf2631a7248ce1fa').to.be.equal(bin2hex(aes_cbc_mac(
            new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]),
            new Uint8Array([
                0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0
            ]),
        )))
    });
});

describe('DeriveSubKey', function () {
    it('AES-128', function () {
        expect('82c4605236f92ba5217c23a6157012b6').to.be.equal(bin2hex(
            aes_derive_subkey(
                new Uint8Array(16),
                new Uint8Array(16),
            )
        ));
        expect('24390d128351997199a03e049f069042').to.be.equal(bin2hex(
            aes_derive_subkey(
                new Uint8Array([
                    0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0
                ]),
                new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])
            )
        ));
    });

    it('AES-256', function () {
        expect('f2fd2e82e35b4acbaef36ff507f5384287bf83a305ecf0ab4b19149d18020cf4').to.be.equal(bin2hex(
            aes_derive_subkey(
                new Uint8Array(32),
                new Uint8Array(16),
            )
        ));
        expect('288b55a161d412715f7cc169e1d4dc87380ea582c4dd8f7fa7bd258f4fa8cf50').to.be.equal(bin2hex(
            aes_derive_subkey(
                new Uint8Array([
                    0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                ]),
                new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])
            )
        ));
        expect('031fe01ef61390d417765e8d381922c4e317a35063a9b5aa6a130bb53cb29454').to.be.equal(bin2hex(
            aes_derive_subkey(
                new Uint8Array([
                    0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                    0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0
                ]),
                new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])
            )
        ));
    });
});

describe('AES-XGCM', function () {
    it('AES-128-XGCM', function () {
        let cipher, tag
        [cipher, tag] = aes_xgcm_encrypt(
            new Uint8Array(0),
            new Uint8Array(0),
            new Uint8Array([
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]),
            new Uint8Array([
                0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0
            ])
        );
        expect('').to.be.equal(bin2hex(cipher))
        expect('0cc08fcd7e41d29feea57ecab8d6ca63').to.be.equal(bin2hex(tag));

        [cipher, tag] = aes_xgcm_encrypt(
            new Uint8Array([0x61, 0x62, 0x63]),
            new Uint8Array([0x41, 0x42, 0x43]),
            new Uint8Array([
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]),
            new Uint8Array([
                0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0
            ])
        );
        expect('dc17c5').to.be.equal(bin2hex(cipher))
        expect('4af4e919636c8781d17142b32c910b10').to.be.equal(bin2hex(tag))
    });

    it('AES-256-XGCM', function () {
        let cipher, tag
        [cipher, tag] = aes_xgcm_encrypt(
            new Uint8Array(0),
            new Uint8Array(0),
            new Uint8Array([
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]),
            new Uint8Array([
                0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0
            ])
        );
        expect('').to.be.equal(bin2hex(cipher))
        expect('cb7350d98e1e518b729b45c85210bf0a').to.be.equal(bin2hex(tag));

        [cipher, tag] = aes_xgcm_encrypt(
            new Uint8Array([0x61, 0x62, 0x63]),
            new Uint8Array([0x41, 0x42, 0x43]),
            new Uint8Array([
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]),
            new Uint8Array([
                0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0
            ])
        );
        expect('26fa69').to.be.equal(bin2hex(cipher))
        expect('d71683646c26c58e1f4a5c124e8c4e99').to.be.equal(bin2hex(tag))
    });
});
